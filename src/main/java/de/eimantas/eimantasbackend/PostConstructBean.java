package de.eimantas.eimantasbackend;

import de.eimantas.eimantasbackend.controller.exceptions.NonExistingEntityException;
import de.eimantas.eimantasbackend.entities.Expense;
import de.eimantas.eimantasbackend.entities.ExpenseCategory;
import de.eimantas.eimantasbackend.service.ExpensesService;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.ApplicationArguments;
import org.springframework.boot.ApplicationRunner;
import org.springframework.core.env.Environment;
import org.springframework.stereotype.Component;

import java.math.BigDecimal;
import java.util.Arrays;

@Component
public class PostConstructBean implements ApplicationRunner {

  private final org.slf4j.Logger logger = LoggerFactory.getLogger(this.getClass());

  @Autowired
  private Environment environment;

  @Autowired
  private ExpensesService service;

  private void preFillData() {

    logger.info("populating data");

    Expense exp = new Expense();
    exp.setAccountId(1);
    exp.setUserId("ee9fb974-c2c2-45f8-b60e-c22d9f00273f");
    exp.setName("Generated");
    exp.setBetrag(BigDecimal.TEN);
    exp.setCategory(ExpenseCategory.STEUER);
    exp.setOrt("Wiesbade");
    exp.setExpensable(true);
    exp.setPurpose("Generated by the system");

    try {
      Expense saved = service.save(exp);
      logger.info("expense saved: " + saved.toString());
    } catch (NonExistingEntityException e) {
      logger.warn("expenses cannot be populated", e);
    }

  }

  @Override
  public void run(ApplicationArguments args) throws Exception {

    logger.info("Starting expenses backend controller");
    logger.info("eureka server: "
        + environment.getProperty("spring.application.name"));
    logger.info("active profiles: "
        + Arrays.asList(environment.getActiveProfiles()).toString());
    logger.info("default profiles: "
        + Arrays.asList(environment.getDefaultProfiles()).toString());
    logger.info("sonstige info: "
        + environment.toString());
    logger.info("allowed Profiles: "
        + environment.getProperty("spring.profiles"));

    if (environment.getProperty("spring.profiles") != null) {
      if (environment.getProperty("spring.profiles").contains("populate")) {
        logger.info("Stuff will be populated!");
        preFillData();
      }
    } else {
      logger.info("Profile doesnt populate data");
    }
  }
}
